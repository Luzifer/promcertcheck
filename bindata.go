// Code generated by go-bindata. DO NOT EDIT.
// sources:
// display.html

package main


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataDisplayhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\x6d\x73\xdb\x36\x0c\xfe\xde\x5f\x81\xea\x2e\x97\x36\x17\x89\x76" +
	"\xd2\x6c\x9d\x27\xf9\xae\x4b\x73\x6b\xb6\x36\xed\x9a\xec\xed\x7a\xfd\x40\x8b\x90\x45\x97\x22\x55\x82\x52\xe2\xb9" +
	"\xfe\xef\x3b\x4a\x7e\x51\x1c\xdb\x6b\xef\xf6\x45\x36\x48\xe0\x01\xf1\x10\x20\x10\x3f\x7e\xf9\xf6\xfc\xe6\xef\x77" +
	"\x17\x90\xbb\x42\x0d\x1f\xc5\xfe\x07\x14\xd7\xe3\x24\x40\x1d\x0c\x1f\x01\xc4\x39\x72\xe1\xff\x00\xc4\x05\x3a\x0e" +
	"\x69\xce\x2d\xa1\x4b\x82\xca\x65\xe1\xf3\xa0\xbb\x95\x3b\x57\x86\xf8\xb9\x92\x75\x12\xfc\x15\xfe\xfe\x22\x3c\x37" +
	"\x45\xc9\x9d\x1c\x29\x0c\x20\x35\xda\xa1\x76\x49\x70\x79\x91\xa0\x18\xe3\x3d\x4b\xcd\x0b\x4c\x82\x5a\xe2\x6d\x69" +
	"\xac\xeb\x28\xdf\x4a\xe1\xf2\x44\x60\x2d\x53\x0c\x1b\xe1\x18\xa4\x96\x4e\x72\x15\x52\xca\x15\x26\xfd\x25\xd0\xe3" +
	"\x30\x84\x9b\x1c\x81\x8f\x4c\x8d\x70\x0a\x0d\xb0\xe3\x63\x82\xa3\xa2\x22\x77\x04\xa9\x29\x10\x32\x69\xc9\x81\xd4" +
	"\xe0\x72\x04\x1f\xdb\x8f\xc0\xf5\x14\x8c\xcb\xd1\x36\xf2\xd2\x37\x78\xa3\xd6\xe6\x88\x67\x0e\xed\x91\x37\x21\x6c" +
	"\x21\xc3\x70\xe1\xd5\x49\xa7\x70\x78\x8e\xd6\xc9\x4c\xa6\xdc\x21\xd4\x5c\x49\xc1\x9d\x34\x1a\x2c\x52\xa5\x1c\xc5" +
	"\xac\xd5\x7a\xb4\x3e\xe8\x4f\xc6\x38\x72\x96\x97\x6b\x24\x25\xf5\x27\xb0\xa8\x92\x80\xdc\x54\x21\xe5\x88\x2e\x80" +
	"\xdc\x62\x96\x04\x8c\x15\xfc\x2e\x15\x3a\x1a\x2d\xed\xbc\x90\x9a\x82\xad\x16\xd8\x69\x74\x1a\x9d\xb1\x94\x68\xbd" +
	"\x16\x15\x52\x47\x29\x51\xd0\x75\xfd\xea\xe6\xcd\xeb\x33\xa0\x5c\x16\xc0\xb5\x80\xf7\x48\xa5\xd1\x22\x9a\x10\x64" +
	"\xc6\xc2\xe5\xc5\x73\xa0\xaa\xf4\xd7\x00\x26\x5b\x28\xa3\xc2\x02\xb5\xa3\xc6\xa0\x40\x21\x39\x7c\xae\xd0\x4a\xec" +
	"\x10\xe1\xa1\xff\x7c\xf1\xfe\xea\xf2\xea\xe7\x41\x17\x54\x18\x24\x7d\xe8\xe0\xd6\xd8\x4f\x20\x33\x98\x9a\x0a\xfc" +
	"\x45\x37\x17\x50\xf2\x31\x42\x2d\x39\x64\x52\xe1\x80\xb1\x7b\x70\x1f\x64\x06\xca\xc1\xe5\x05\xfc\xf0\xb1\x5d\x05" +
	"\x88\x29\xb5\xb2\x74\x40\x36\x4d\x02\x9f\x6f\x34\x60\xcc\x10\x45\x0b\x7e\x3c\x25\x3e\x89\xcf\x28\x97\x35\x3b\x8d" +
	"\xbe\x8f\x4e\xd6\x72\x43\xc7\x84\x82\x61\xcc\x5a\x98\x6f\x41\xb5\x6d\x48\xac\x1f\x3d\x8b\x4e\x96\xd2\x0e\xc4\xf8" +
	"\xf1\x07\xd4\x42\x66\x1f\xdb\x70\x62\xb6\x2c\xa2\x78\x64\xc4\x74\xa1\x23\x64\x0d\xa9\xe2\x44\x49\xe0\x53\x8e\x4b" +
	"\x8d\x36\x58\x9d\xa8\xb3\x6b\xcd\x6d\x00\x4d\x4e\x24\x41\x8e\x72\x9c\xbb\xc1\x49\xaf\xbc\xf3\x4e\x85\xac\x17\x57" +
	"\xfb\xd0\x64\xb5\xb1\xe9\x4b\x85\x85\x08\xfb\x27\x2b\x5f\x9b\x1a\x25\xd7\xa8\xa0\xf9\x86\x02\x33\x5e\x29\x77\x4f" +
	"\x77\x8b\x76\xe8\x03\x94\x7a\xbc\xa1\x07\xb0\xbf\x30\xee\x83\xb6\xd1\xec\xf7\xe3\xf9\x7b\xe0\x24\x76\x7c\xa4\x70" +
	"\xa9\xd8\x0a\xcd\x37\x24\x67\x65\x89\xe2\x81\x85\xb7\xb1\x0f\x17\xfd\x72\x3e\x7c\x65\xc8\xc5\xcc\xe5\x43\x2f\x5c" +
	"\x12\x55\x68\x57\xe2\x1f\x3e\x06\xa8\xb4\x93\x6a\xb5\xf6\xbe\x09\xa6\x11\x1f\xba\x61\xdb\xfc\xcc\x0e\x9a\x5a\xcb" +
	"\x0d\xb9\x63\xcf\x85\x7f\x8f\x16\x94\x00\x19\xeb\x50\xc0\xc1\x7c\xcb\xe9\x66\x07\xbe\x82\x2c\x52\x74\xed\xb8\xab" +
	"\x08\x92\x04\xd2\x35\xc3\x6f\x7f\xdd\x6e\xb6\x33\xda\xd9\x01\xa0\xda\x87\x78\x71\x57\x4a\x8b\x74\x6d\x8c\xde\x03" +
	"\xbd\x64\xfe\x96\x5b\xbd\x2d\x09\x56\xae\x08\xbf\x02\x45\x70\x3d\xee\x54\xc2\x26\x88\xaf\xab\xdd\x28\x62\x9b\x19" +
	"\xdc\xa3\xae\x9b\x92\x3b\x70\x00\x62\x3e\x1a\x59\x68\x9e\xed\x24\x98\xcd\x36\x0d\xa3\x97\x57\xd7\x57\xbc\x40\x82" +
	"\x2f\x30\x31\x52\x0f\x0e\x8f\xe1\x10\xe6\xf3\x60\x38\x9b\x35\xd7\x0a\xf3\x79\xcc\x3c\xc6\x9e\xf3\xec\xe3\x03\x60" +
	"\x0d\xb4\x07\x61\x2f\x19\x6c\x17\x1b\x9e\xa6\x5d\x7c\x6c\x89\xb5\x2d\x81\xe8\xdc\x14\x85\xd1\x3e\x6a\x98\xcf\x3b" +
	"\xce\xff\x37\x3f\x57\xc6\xbd\xf0\x8d\x16\xbe\x80\x93\x05\x0e\x82\x93\x5e\xef\xbb\xb0\xd7\x0f\x7b\x27\xd0\x3f\x1b" +
	"\xf4\x9e\x0d\x7a\x67\xf0\xe6\xfa\x26\xf8\x26\xff\xb3\x4e\x76\x47\xd7\xce\x4a\x3d\x7e\xf2\xb4\xb9\x9e\xed\x66\x3b" +
	"\x2b\x16\xb5\xf0\x45\xfb\x80\xed\x98\x35\x6f\xcd\xf0\xdb\x1f\xb3\xcc\x18\xb7\x25\xd3\x63\xbe\xe8\xfa\xcb\x4e\x34" +
	"\x96\x2e\xaf\x46\x4d\x17\x7a\x5d\xfd\x23\x33\xb4\xac\xb4\xa6\xf0\x75\x9a\xe6\x98\x7e\x0a\x86\xef\xac\x29\xce\x97" +
	"\xa2\x4f\x9d\x1a\x2d\xf9\x87\xb6\x49\xc3\xff\x38\xda\xc6\xc2\x46\x57\x59\x6f\x76\x37\x9a\x76\x3f\xf9\xad\x42\x3b" +
	"\x85\x27\x1a\x53\x24\xe2\x76\xda\xbc\x6a\xab\xd1\xe6\x90\xe0\x17\x5e\xf3\xeb\xb6\xb7\x96\xaa\x1a\x4b\x4d\x4f\xd7" +
	"\x2d\xbe\xdb\x74\x19\xe3\x13\x7e\x17\x8d\x8d\x19\x2b\xe4\xa5\xa4\x26\x5a\xbf\xc6\x94\x1c\x11\x9b\xf8\x79\x63\xca" +
	"\xfa\x51\xbf\x1f\x9d\x2e\xa4\x9d\xcd\x37\x0c\xe1\x52\xa7\xaa\x12\x08\x5c\x29\x3f\xc3\x95\x52\xa1\x58\x1e\x01\x9e" +
	"\x8c\x50\x99\xdb\xa7\xc7\x60\x2c\xc8\x85\xa2\xd4\x42\xd6\x52\x54\x5c\x35\xb3\x08\x01\x27\xd0\x88\x02\xc5\xae\x03" +
	"\x7f\xed\x44\x36\xd9\x1c\xc8\x36\x8f\x1c\xb3\x76\x2a\x88\x59\x3b\x85\xff\x1b\x00\x00\xff\xff\xe7\x19\x78\x14\x96" +
	"\x0b\x00\x00")

func bindataDisplayhtmlBytes() ([]byte, error) {
	return bindataRead(
		_bindataDisplayhtml,
		"display.html",
	)
}



func bindataDisplayhtml() (*asset, error) {
	bytes, err := bindataDisplayhtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "display.html",
		size: 2966,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1538399498, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"display.html": bindataDisplayhtml,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"display.html": {Func: bindataDisplayhtml, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
